#pragma once
////////////////////////////////////////////////////////////////////////////////
#include "../camera.hpp"
#include "../pipeline.hpp"
#include "color.hpp"
////////////////////////////////////////////////////////////////////////////////
#include <chrono>
////////////////////////////////////////////////////////////////////////////////
namespace Vis {
////////////////////////////////////////////////////////////////////////////////
enum class SetPixelEnum { RGBA_DEPTH, RGBA_NO_DEPTH, BW_DEPTH };
////////////////////////////////////////////////////////////////////////////////
enum class MatrixCalculationEnum { MATRIX_CALCULATION_SMVP };
////////////////////////////////////////////////////////////////////////////////
enum class FastClipPointEnum {};
////////////////////////////////////////////////////////////////////////////////
enum class FastClipLineEnum { FAST_CLIP_LINE };
////////////////////////////////////////////////////////////////////////////////
enum class FastClipTriangleEnum { FAST_CLIP_TRIANGLE };
////////////////////////////////////////////////////////////////////////////////
enum class ClipAfterDehomogPointEnum { CLIP_AFTER_DEHOMOG_NONE };
////////////////////////////////////////////////////////////////////////////////
enum class ClipAfterDehomogLineEnum {
    CLIP_AFTER_DEHOMOG_NONE,
    CLIP_AFTER_DEHOMOG_LINE
};
////////////////////////////////////////////////////////////////////////////////
enum class ClipAfterDehomogTriangleEnum {
    CLIP_AFTER_DEHOMOG_NONE,
    CLIP_AFTER_DEHOMOG_TRIANGLE
};
////////////////////////////////////////////////////////////////////////////////
enum class ClipBeforeDehomogPointEnum {};
////////////////////////////////////////////////////////////////////////////////
enum class ClipBeforeDehomogLineEnum { CLIP_BEFORE_DEHOMOG_LINE };
////////////////////////////////////////////////////////////////////////////////
enum class ClipBeforeDehomogTriangleEnum {};
////////////////////////////////////////////////////////////////////////////////
enum class Dehomog { DEHOMOG_VERTICES };
////////////////////////////////////////////////////////////////////////////////
enum class RasterizationPointEnum {};
////////////////////////////////////////////////////////////////////////////////
enum class RasterizationLineEnum { RASTERIZATION_LINE_DDA };
////////////////////////////////////////////////////////////////////////////////
enum class RasterizationTriangleEnum { RASTERIZATION_TRIANGLE_FILL };
////////////////////////////////////////////////////////////////////////////////
enum class TrasformVerticesByMetrixEnum {
    TRASFORM_VERTICES_BY_MATRIX_POSITION
};
////////////////////////////////////////////////////////////////////////////////
enum class TrasformVerticesOntoViewportEnum { TRASFORM_VERTICES_ONTO_VIEWPORT };
////////////////////////////////////////////////////////////////////////////////
struct SceneInfo {
    ColorRGBA32f clear_color{0.02, 0.02, 0.02, 1.0};
    std::chrono::duration<double> last_render{0};
    glm::mat4 model_matrix{glm::mat4(1.0)};
    std::unique_ptr<PerspectiveCamera> camera;
    PipelineData pipeline_triangle_data;
    PipelineData pipeline_line_data;
    PipelineData pipeline_point_data;
    SetPixelEnum set_pixel_setting;
};
////////////////////////////////////////////////////////////////////////////////
} // namespace Vis
